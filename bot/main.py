import os
import sys
import logging
import datetime

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.filters import CommandStart

from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏
sys.path.append(os.path.dirname(__file__))

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

if not API_TOKEN or not ADMIN_CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    raise RuntimeError("ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# ‚Äî‚Äî‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî‚Äî‚Äî
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ‚Äî‚Äî‚Äî FSM: –∑–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ ‚Äî‚Äî‚Äî
class OrderForm(StatesGroup):
    name = State()
    niche = State()
    task = State()


# ‚Äî‚Äî‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî‚Äî‚Äî
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –£—Å–ª—É–≥–∏"), KeyboardButton(text="üíº –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç")],
            [KeyboardButton(text="üí¨ –ó–∞–∫–∞–∑–∞—Ç—å")]
        ],
        resize_keyboard=True
    )


# ‚Äî‚Äî‚Äî –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ get_sheet() ‚Äî‚Äî‚Äî
def get_sheet():
    """
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
    –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º append_row.
    """
    class DummySheet:
        def append_row(self, row):
            logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {row}")
    return DummySheet()
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é!


# ‚Äî‚Äî‚Äî –•–µ–Ω–¥–ª–µ—Ä /start ‚Äî‚Äî‚Äî
@dp.message(lambda msg: msg.text == "/start")
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ",
        reply_markup=get_main_menu()
    )


# ‚Äî‚Äî‚Äî FSM: –ó–∞–∫–∞–∑ ‚Äî‚Äî‚Äî
@dp.message(lambda msg: msg.text == "üí¨ –ó–∞–∫–∞–∑–∞—Ç—å")
async def start_order(message: Message, state: FSMContext):
    await state.set_state(OrderForm.name)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")


@dp.message(OrderForm.name)
async def process_name(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")
        return
    await state.update_data(name=text)
    await state.set_state(OrderForm.niche)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π —Ç—ã –Ω–∏—à–∏?")


@dp.message(OrderForm.niche)
async def process_niche(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏—à—É.")
        return
    await state.update_data(niche=text)
    await state.set_state(OrderForm.task)
    await message.answer("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.")


@dp.message(OrderForm.task)
async def process_task(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name', '‚Äî')
    niche = data.get('niche', '‚Äî')
    task = message.text.strip()
    if not task:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.")
        return

    user_id = message.from_user.id
    username = message.from_user.username or "‚Äî"
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        sheet = get_sheet()
        if sheet:
            sheet.append_row([date, name, niche, task, user_id, username])
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è @{username}")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheet")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:\n{e}")
        await state.clear()
        return

    await bot.send_message(
        ADMIN_CHAT_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìå –ù–∏—à–∞: {niche}\n"
        f"üìù –ó–∞–¥–∞—á–∞: {task}\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ @{username}\n"
        f"üìÖ {date}"
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()


# ‚Äî‚Äî‚Äî –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç ‚Äî‚Äî‚Äî
@dp.message(lambda msg: msg.text == "üíº –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç")
async def show_portfolio(message: Message):
    await message.answer(
        "üíº –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:\n\n"
        "üìÑ [–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ](https://docs.google.com/document/d/1m0ydVEODPfvMTqCXtWvBSlp_jXZNX600xf3IgApGPVk)\n\n" 
        "üì¶ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞:\n"
        "¬´–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—É—Ä—Ç–∫–∞ ‚Äî —ç—Ç–æ –±—Ä–æ–Ω—è –Ω–∞ –∑–∏–º—É¬ª\n\n"
        "üëü –û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫:\n"
        "¬´–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è, –ø–æ–¥–æ—à–≤–∞ –∏ –ø–∞–º—è—Ç—å —Å—Ç–µ–ª—å–∫–∏ ‚Äî –∫–æ–º—Ñ–æ—Ä—Ç –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å¬ª",
        parse_mode="Markdown"
    )


# ‚Äî‚Äî‚Äî –£—Å–ª—É–≥–∏ ‚Äî‚Äî‚Äî
@dp.message(lambda msg: msg.text == "üìã –£—Å–ª—É–≥–∏")
async def show_services(message: Message):
    await message.answer(
        "üìã –£—Å–ª—É–≥–∏:\n\n"
        "‚úç –ü–æ–º–æ–≥–∞—é —Å–ª–æ–≤–∞–º–∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç—ã –¥–ª—è Telegram, –ø—Ä–æ–≥—Ä–µ–≤—ã\n"
        "‚Ä¢ –ü—Ä–æ–¥–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ Ozon / WB\n"
        "‚Ä¢ –°–∫—Ä–∏–ø—Ç—ã –ø–æ–¥ –≤–∏–¥–µ–æ / –ª–µ–Ω–¥–∏–Ω–≥–∏\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç—É—Ä–∞, —É–ø–∞–∫–æ–≤–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–æ–≤\n\n"
        "üïê –°—Ä–æ–∫–∏ ‚Äî –æ—Ç 1 –¥–Ω—è\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –æ—Ç 1 000 ‚ÇΩ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ó–∞–∫–∞–∑–∞—Ç—å¬ª ‚Äî –∏ –æ–±—Å—É–¥–∏–º –≤–∞—à—É –∑–∞–¥–∞—á—É.",
        parse_mode="Markdown"
    )


# ‚Äî‚Äî‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel ‚Äî‚Äî‚Äî
async def main(event, context):
    update = Update.model_validate_json(event["body"], context={"bot": bot})
    await dp.propagate_event(bot=bot, update=update)
    return {"statusCode": 200, "body": "OK"}